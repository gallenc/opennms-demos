---
version: '3'

volumes:
  data-postgres: {}
  data-opennms: {}
  data-opennms-cfg: {}
  data-cassandra-01: {}
  data-grafana: {}
  data-es01: {}

services:
  database:
    image: postgres:13
    container_name: database
    hostname: database
    environment:
      TZ: ${TIMEZONE:-America/New_York}
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - data-postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 30s
      retries: 3

  cassandra-01:
    image: cassandra:3.11
    container_name: cassandra-01
    hostname: cassandra-01
    environment:
      TZ: ${TIMEZONE:-America/New_York}
      CASSANDRA_CLUSTER_NAME: opennms-newts
      CASSANDRA_DC: opennms-lab
      CASSANDRA_RACK: opennms-lab-rack
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
      LOCAL_JMX: 'false'
      JMX_HOST: 127.0.0.1
    volumes:
      - data-cassandra-01:/var/lib/cassandra

  horizon:
#    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_ORG:-opennms}/${HORIZON_OCI:-horizon}:${ONMS_VERSION:-27.1.0}
#    image: opennms/horizon:jira_NMS-13190
    image: opennms/horizon:HAR-FIREFOX
# use the docker file in same directory to build the image
#    build: .
    container_name: horizon
    hostname: horizon
    depends_on: 
      - database
      - cassandra-01
    sysctls:
      net.ipv4.ping_group_range: "0 429496729"
    environment:
      TZ: ${TIMEZONE:-America/New_York}
      REPLICATION_FACTOR: 1
      OPENNMS_TIMESERIES_STRATEGY: newts
      JAVA_MIN_MEM: 512M
      JAVA_MAX_MEM: 2048M
    volumes:
      - data-opennms:/opennms-data
      - data-opennms-cfg:/opt/opennms/etc
      - ./container-fs/opt/opennms/deploy:/opt/opennms/deploy:ro
      - ./container-fs/opt/opennms-overlay:/opt/opennms-overlay:ro
      - ./container-fs/opt/opennms-etc-overlay:/opt/opennms-etc-overlay:ro
      - ./container-fs/etc/conf.d/confd.toml:/etc/confd/confd.toml:ro
    command: ["-s"]
    ports:
      - "8101:8101/tcp"
      - "8980:8980/tcp"
      - "10162:1162/udp"
    healthcheck:
      test: [ "CMD", "curl", "-f", "-I", "http://localhost:8980/opennms/login.jsp" ]
      interval: 1m
      timeout: 5s
      retries: 3

  grafana:
    image: grafana/grafana:7.5.0
    container_name: grafana
    hostname: grafana
    environment:
      TZ: ${TIMEZONE:-America/New_York}
      GF_SECURITY_ADMIN_PASSWORD: mypass
      GF_INSTALL_PLUGINS: https://github.com/OpenNMS/opennms-helm/archive/v6.0.0.zip;grafana-piechart-panel;neocat-cal-heatmap-panel,https://grafana.com/api/plugins/grafana-worldmap-panel/versions/0.3.2/download;grafana-worldmap-panel
    volumes:
      - data-grafana:/var/lib/grafana
    ports:
      - "3000:3000/tcp"
      
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.8.13
    container_name: es01
    hostname: es01
    environment:
     TZ: ${TIMEZONE:-America/New_York}
     discovery.type: single-node
     node.name: es-node-01
    ports:
      - "9200:9200/tcp"
      - "9300:9300/tcp"
    volumes:
      - data-es01:/usr/share/elasticsearch/data
    healthcheck:
      test: curl http://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:6.8.13
    container_name: kibana
    hostname: kibana
    depends_on: 
      - es01
    environment:
      TZ: ${TIMEZONE:-America/New_York}
      ELASTICSEARCH_HOSTS: http://es01:9200
    ports:
      - "5601:5601/tcp"
    healthcheck:
      test: curl http://localhost:5601 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 50
